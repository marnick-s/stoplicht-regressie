{"version":3,"file":"lib.js","sources":["../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js","../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js","../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js","../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js","../src/util.ts","../src/lib.ts"],"sourcesContent":["module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction checkPathExt (path, options) {\n  var pathext = options.pathExt !== undefined ?\n    options.pathExt : process.env.PATHEXT\n\n  if (!pathext) {\n    return true\n  }\n\n  pathext = pathext.split(';')\n  if (pathext.indexOf('') !== -1) {\n    return true\n  }\n  for (var i = 0; i < pathext.length; i++) {\n    var p = pathext[i].toLowerCase()\n    if (p && path.substr(-p.length).toLowerCase() === p) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction checkStat (stat, path, options) {\n  if (!stat.isSymbolicLink() && !stat.isFile()) {\n    return false\n  }\n  return checkPathExt(path, options)\n}\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, path, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), path, options)\n}\n","module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), options)\n}\n\nfunction checkStat (stat, options) {\n  return stat.isFile() && checkMode(stat, options)\n}\n\nfunction checkMode (stat, options) {\n  var mod = stat.mode\n  var uid = stat.uid\n  var gid = stat.gid\n\n  var myUid = options.uid !== undefined ?\n    options.uid : process.getuid && process.getuid()\n  var myGid = options.gid !== undefined ?\n    options.gid : process.getgid && process.getgid()\n\n  var u = parseInt('100', 8)\n  var g = parseInt('010', 8)\n  var o = parseInt('001', 8)\n  var ug = u | g\n\n  var ret = (mod & o) ||\n    (mod & g) && gid === myGid ||\n    (mod & u) && uid === myUid ||\n    (mod & ug) && myUid === 0\n\n  return ret\n}\n","var fs = require('fs')\nvar core\nif (process.platform === 'win32' || global.TESTING_WINDOWS) {\n  core = require('./windows.js')\n} else {\n  core = require('./mode.js')\n}\n\nmodule.exports = isexe\nisexe.sync = sync\n\nfunction isexe (path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  if (!cb) {\n    if (typeof Promise !== 'function') {\n      throw new TypeError('callback not provided')\n    }\n\n    return new Promise(function (resolve, reject) {\n      isexe(path, options || {}, function (er, is) {\n        if (er) {\n          reject(er)\n        } else {\n          resolve(is)\n        }\n      })\n    })\n  }\n\n  core(path, options || {}, function (er, is) {\n    // ignore EACCES because that just means we aren't allowed to run it\n    if (er) {\n      if (er.code === 'EACCES' || options && options.ignoreErrors) {\n        er = null\n        is = false\n      }\n    }\n    cb(er, is)\n  })\n}\n\nfunction sync (path, options) {\n  // my kingdom for a filtered catch\n  try {\n    return core.sync(path, options || {})\n  } catch (er) {\n    if (options && options.ignoreErrors || er.code === 'EACCES') {\n      return false\n    } else {\n      throw er\n    }\n  }\n}\n","const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n","import * as cp from \"child_process\"\nimport { type PathLike, type StatOptions, Stats, stat as rawStat } from \"fs-extra\"\nimport splitargs from \"splitargs2\"\n\nexport function getEnvVar(name: string) {\n  const value = process.env[name]\n  if (typeof value === \"string\" && value.length > 0) {\n    return value\n  }\n  return undefined\n}\n\nexport async function getCmakeGenerator(cmake: string, arch: string): Promise<string> {\n  const archString = arch === \"x64\" ? \"Win64\" : arch === \"x86\" ? \"\" : null\n  if (archString === null) {\n    console.error(\"Failed to find valid VS gen, using native. Good Luck.\")\n    return \"native\"\n  }\n\n  const generators = await execCapture(`\"${cmake}\" -G`)\n  const hasCR = generators.includes(\"\\r\\n\")\n  const output = hasCR ? generators.split(\"\\r\\n\") : generators.split(\"\\n\")\n  let found = false\n  let useVSGen = \"\"\n\n  for (const line of output) {\n    if (!found && line.trim() === \"Generators\") {\n      found = true\n      continue\n    }\n    const genParts = line.split(\"=\")\n    if (genParts.length <= 1) {\n      // Some descriptions are multi-line\n      continue\n    }\n    /** Current MSVS compiler selected in Windows generally is prefixed with \"* \" */\n    genParts[0] = genParts[0].replace(/^(\\* )/, \"\").trim()\n\n    // eslint-disable-next-line optimize-regex/optimize-regex\n    if (genParts[0].match(/Visual\\s+Studio\\s+\\d+\\s+\\d+(\\s+\\[arch\\])?/)) {\n      console.log(\"Found generator: \", genParts[0])\n      // The first entry is usually the latest entry\n      useVSGen = genParts[0]\n      break\n    }\n  }\n  const useSwitch = !useVSGen.match(/.*\\[arch]/)\n  if (useSwitch) {\n    useVSGen += \" -A\" // essentially using this as a flag\n  } else {\n    useVSGen = useVSGen.replace(\"[arch]\", archString).trim()\n  }\n  return useVSGen\n}\n\nexport function execCapture(command: string): Promise<string> {\n  return new Promise((resolve) => {\n    cp.exec(command, (_, stdout, stderr) => {\n      resolve(stdout || stderr)\n    })\n  })\n}\n\nexport function exec(command: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    cp.exec(command, (err, stdout, stderr) => {\n      if (err) {\n        reject(new Error(`${err.message}\\n${stdout || stderr}`))\n      } else {\n        resolve(stdout)\n      }\n    })\n  })\n}\n\nexport function run(command: string, cwd: string = process.cwd(), silent: boolean = false): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const args = splitargs(command)\n    const name = args[0]\n    args.splice(0, 1)\n    const child = cp.spawn(name, args, {\n      stdio: silent ? \"ignore\" : \"inherit\",\n      cwd,\n    })\n    let ended = false\n    child.on(\"error\", (e) => {\n      if (!ended) {\n        reject(e)\n        ended = true\n      }\n    })\n    child.on(\"exit\", (code, signal) => {\n      if (ended) {\n        return\n      }\n      if (code === 0) {\n        resolve()\n      } else {\n        reject(new Error(`Process terminated: ${code ?? signal}`))\n      }\n      ended = true\n    })\n  })\n}\n\n/** Exception safe version of stat */\nexport async function stat(path: PathLike, options?: StatOptions & { bigint: false }): Promise<Stats> {\n  try {\n    return await rawStat(path, options)\n  } catch {\n    // Returns an empty Stats which gives false/undefined for the methods.\n    // @ts-expect-error allow private constructor of Stat\n    return new Stats()\n  }\n}\n","import which from \"which\"\nimport type { BuildMode } from \"./buildMode.js\"\nimport { getCmakeGenerator } from \"./util.js\"\n\nexport type ArrayOrSingle<T> = T | T[]\n\nexport type BuildConfigurationDefaulted = {\n  name: string\n  dev: boolean\n  os: typeof process.platform\n  arch: typeof process.arch\n  runtime: string\n  runtimeVersion: string\n  toolchainFile: string | null\n  CMakeOptions?: { name: string; value: string }[]\n  addonSubdirectory: string\n\n  // list of additional definitions to fixup node quirks for some specific versions\n  additionalDefines: string[]\n\n  /** The ABI number that is used by the runtime. */\n  abi?: number\n\n  /** The libc that is used by the runtime. */\n  libc?: string\n}\n\nexport type BuildConfiguration = Partial<BuildConfigurationDefaulted>\n\nexport function defaultBuildConfiguration(config: BuildConfiguration): BuildConfigurationDefaulted {\n  if (config.name === undefined) {\n    config.name = \"\" //Empty name should be fine (TM)\n  }\n  if (config.dev === undefined) {\n    config.dev = false\n  }\n  if (config.os === undefined) {\n    config.os = process.platform\n    console.warn(`'os' was missing in the 'configurations'. Defaulting to the current operating system ${config.os}`)\n  }\n\n  if (config.arch === undefined) {\n    config.arch = process.arch\n    console.warn(`'arch' was missing in the 'configurations'. Defaulting to the current architecture ${config.arch}`)\n  }\n\n  if (config.runtime === undefined) {\n    config.runtime = \"node\"\n    console.warn(\"`runtime` was missing in the `configurations`. Defaulting to `node`\")\n  }\n\n  if (config.runtimeVersion === undefined) {\n    config.runtimeVersion = process.versions.node\n    console.warn(\n      `'runtimeVersion' was missing in the 'configurations'. Defaulting to the current runtimeVersion ${config.runtimeVersion}`,\n    )\n  }\n\n  if (config.toolchainFile === undefined) {\n    config.toolchainFile = null\n  }\n\n  if (config.CMakeOptions === undefined) {\n    config.CMakeOptions = []\n  }\n  if (\"cmakeOptions\" in config && config.cmakeOptions !== undefined) {\n    console.warn(\"cmakeOptions was specified which was disabled in the 0.3.0 release. Please rename it to CMakeOptions\")\n  }\n\n  if (config.addonSubdirectory === undefined) {\n    config.addonSubdirectory = \"\"\n  }\n\n  config.additionalDefines = [] //internal variable, not supposed to be set by the user\n\n  return config as BuildConfigurationDefaulted\n}\n\nexport type BuildOptionsDefaulted = {\n  // A list of configurations to build\n  configurations: BuildConfiguration[]\n  // directory of the package which is being built\n  packageDirectory: string\n  // name of the built node addon\n  projectName: string\n  // directory where the binaries will end\n  targetDirectory: string\n  // directory where intermediate files will end up\n  stagingDirectory: string\n  // which cmake instance to use\n  cmakeToUse: string\n  // which cmake generator to use\n  generatorToUse: string\n  // cmake generator binary.\n  generatorBinary: string\n  // Debug or release build\n  buildType: string\n  // global cmake options and defines\n  globalCMakeOptions?: { name: string; value: string }[]\n  // node abstraction API to use (e.g. nan or node-addon-api)\n  nodeAPI?: string\n}\n\nexport type OverrideConfig = {\n  match: {\n    os?: ArrayOrSingle<typeof process.platform>\n    arch?: ArrayOrSingle<typeof process.arch>\n    runtime?: ArrayOrSingle<string>\n    runtimeVersion?: ArrayOrSingle<string>\n  }\n  addDefines: ArrayOrSingle<string>\n}\n\nexport type BuildOptions = Partial<BuildOptionsDefaulted>\n\nasync function whichWrapped(cmd: string): Promise<string | null> {\n  try {\n    return await which(cmd)\n  } catch (err) {\n    return null\n  }\n}\n\nexport async function defaultBuildOptions(configs: BuildOptions, buildmode: BuildMode): Promise<BuildOptionsDefaulted> {\n  // Handle missing configs.configurations\n  // TODO handle without nativeonly and osonly\n  if (buildmode.type === \"nativeonly\") {\n    console.log(\n      `--------------------------------------------------\n      WARNING: Building only for the current runtime.\n      WARNING: DO NOT SHIP THE RESULTING PACKAGE\n     --------------------------------------------------`,\n    )\n    //Yeah this pretty ugly, but whatever\n    configs.configurations = [defaultBuildConfiguration({})]\n  }\n  if (buildmode.type === \"osonly\") {\n    console.log(\n      `--------------------------------------------------\n      WARNING: Building only for the current OS.\n      WARNING: DO NOT SHIP THE RESULTING PACKAGE\n     --------------------------------------------------`,\n    )\n    if (configs.configurations === undefined) {\n      console.error(\"No `configurations` entry was found in the package.json\")\n      process.exit(1)\n    }\n    configs.configurations = configs.configurations.filter((j) => j.os === process.platform)\n    if (configs.configurations.length === 0) {\n      console.error(\"No configuration left to build!\")\n      process.exit(1)\n    }\n    for (const config of configs.configurations) {\n      // A native build should be possible without toolchain file.\n      config.toolchainFile = null\n    }\n  }\n  if (buildmode.type === \"dev-os-only\") {\n    console.log(\n      `--------------------------------------------------\n        WARNING: Building dev-os-only package\n        WARNING: DO NOT SHIP THE RESULTING PACKAGE\n       --------------------------------------------------`,\n    )\n    if (configs.configurations === undefined) {\n      console.error(\"No `configurations` entry was found in the package.json\")\n      process.exit(1)\n    }\n    const candidateConfig = configs.configurations.find((j) => j.os === process.platform && j.dev)\n    if (candidateConfig === undefined) {\n      console.error(`No matching entry with \\`dev == true\\` and \\`os == ${process.platform}\\` in \\`configurations\\``)\n      process.exit(1)\n    }\n    configs.configurations = [candidateConfig]\n    //todo toolchain file?\n  }\n  if (buildmode.type === \"named-configs\") {\n    if (configs.configurations === undefined) {\n      console.error(\"No `configurations` entry was found in the package.json\")\n      process.exit(1)\n    }\n    // unnamed configs are always filtered out\n    configs.configurations = configs.configurations.filter((config) => {\n      return config.name !== undefined ? buildmode.configsToBuild.includes(config.name) : false\n    })\n    if (configs.configurations.length === 0) {\n      console.error(\"No configuration left to build!\")\n      process.exit(1)\n    }\n  }\n\n  if (configs.packageDirectory === undefined) {\n    configs.packageDirectory = process.cwd()\n  }\n\n  if (configs.projectName === undefined) {\n    configs.projectName = \"addon\"\n  }\n\n  if (configs.targetDirectory === undefined) {\n    configs.targetDirectory = \"build\"\n  }\n\n  if (configs.stagingDirectory === undefined) {\n    configs.stagingDirectory = \"staging\"\n  }\n\n  /* eslint-disable require-atomic-updates */\n\n  if (configs.cmakeToUse === undefined) {\n    const cmake = await whichWrapped(\"cmake\")\n    if (cmake === null) {\n      console.error(\"cmake binary not found, try to specify 'cmakeToUse'\")\n      process.exit(1)\n    }\n    configs.cmakeToUse = cmake\n  }\n\n  // handle missing generator\n  const [ninja, make] = await Promise.all([whichWrapped(\"ninja\"), whichWrapped(\"make\")])\n\n  if (configs.generatorToUse === undefined) {\n    console.log(\"no generator specified in package.json, checking ninja\")\n    if (ninja === null) {\n      console.log(\"ninja not found, checking make\")\n      if (make === null) {\n        console.log(\"make not found, using native\")\n        if (process.platform === \"win32\") {\n          // I'm on windows, so fixup the architecture mess.\n          const generator = await getCmakeGenerator(configs.cmakeToUse, process.arch)\n          configs.generatorToUse = generator\n          configs.generatorBinary = \"native\"\n        } else {\n          configs.generatorToUse = \"native\"\n          configs.generatorBinary = \"native\"\n        }\n      } else {\n        console.log(\"found make at\", make, \"(fallback)\")\n        configs.generatorToUse = \"Unix Makefiles\"\n        configs.generatorBinary = make\n      }\n    } else {\n      console.log(\"found ninja at\", ninja)\n      configs.generatorToUse = \"Ninja\"\n      configs.generatorBinary = ninja\n    }\n  }\n\n  // handle missing generatorBinary\n  if (configs.generatorBinary === undefined) {\n    if (configs.generatorToUse === \"Ninja\") {\n      if (ninja === null) {\n        console.error(\n          \"Ninja was specified as generator but no ninja binary could be found. Specify it via 'generatorBinary'\",\n        )\n        process.exit(1)\n      }\n      configs.generatorBinary = ninja\n    } else if (configs.generatorToUse === \"Unix Makefiles\") {\n      if (make === null) {\n        console.error(\n          \"Unix Makefiles was specified as generator but no make binary could be found. Specify it via 'generatorBinary'\",\n        )\n        process.exit(1)\n      }\n      configs.generatorBinary = make\n    } else {\n      console.error(`Unsupported generator ${configs.generatorToUse}`)\n      process.exit(1)\n    }\n  }\n\n  if (configs.buildType === undefined) {\n    configs.buildType = \"Release\"\n    console.warn(\"`buildType` was missing. Considering 'Release'\")\n  }\n\n  if (configs.configurations) {\n    for (const v of configs.configurations) {\n      v.additionalDefines = []\n    }\n  }\n\n  // TODO move the code related to globalCMakeOptions\n  // TODO move the code related to nodeAPI\n\n  return configs as BuildOptionsDefaulted\n}\n"],"names":["module","isexe","sync","fs","require","checkPathExt","path","options","pathext","pathExt","undefined","process","env","PATHEXT","split","indexOf","i","length","p","toLowerCase","substr","checkStat","stat","isSymbolicLink","isFile","cb","er","statSync","checkMode","mod","mode","uid","gid","myUid","getuid","myGid","getgid","u","parseInt","g","o","ug","ret","core","platform","global","TESTING_WINDOWS","Promise","TypeError","resolve","reject","is","code","ignoreErrors","isWindows","OSTYPE","COLON","getNotFoundError","cmd","Object","assign","Error","getPathInfo","opt","colon","pathEnv","match","cwd","PATH","pathExtExe","unshift","which","found","step","all","ppRaw","pathPart","test","slice","pCmd","join","subStep","ii","ext","push","then","res","whichSync","j","cur","nothrow","getCmakeGenerator","cmake","arch","archString","generators","execCapture","output","useVSGen","line","genParts","command","cp","_","stdout","stderr","defaultBuildConfiguration","config","whichWrapped","defaultBuildOptions","configs","buildmode","candidateConfig","ninja","make","generator","v"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}